import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

import { fetchTracksChart } from '../../utils/apiclient'

const initialState = {
  value: [],
  status: 'idle',  // idle, loading, suceeded, failed
  error: null,
}

export async function refreshThunkCreator(params) {
  var index
  var limit

  if (params){
    index = params.index
    limit = params.limit
  }

  const tracksChart = await fetchTracksChart({index: index, limit: limit})

  return tracksChart
}

export const refresh = createAsyncThunk(
  'trackList/refresh',
  refreshThunkCreator,
  {
    condition: (arg, { getState }) => {
      const { trackList } = getState()
      const fetchStatus = trackList.status
      if (fetchStatus === 'loading'){
        return false
      }
    }
  }
)

export const trackListSlice = createSlice({
  name: 'trackList',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [refresh.pending]: (state) => {state.status = 'loading'},
    [refresh.fulfilled]: (state, action) => {
      const chartTracks = action.payload.data
      state.status = 'suceeded'
      state.value =  chartTracks.map( track => {
        return {
          cover: track.album.cover,
          id: track.id,
          link: track.link,
          preview: track.preview,
          singer: track.artist.name,
          time: track.duration,
          title: track.title
        }
      })

    }
  },
})

export const {} = trackListSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTrackList = (state) => state.trackList.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState())
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount))
  }
}

export default trackListSlice.reducer
